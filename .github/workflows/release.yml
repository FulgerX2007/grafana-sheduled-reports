name: Release Plugin

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build backend for Linux (amd64)
        run: |
          cd cmd/backend
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o ../../dist/gpx_reporting_linux_amd64
          chmod +x ../../dist/gpx_reporting_linux_amd64

      - name: Build backend for Linux (arm64)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          cd cmd/backend
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -o ../../dist/gpx_reporting_linux_arm64
          chmod +x ../../dist/gpx_reporting_linux_arm64

      - name: Build backend for Darwin (amd64)
        run: |
          cd cmd/backend
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o ../../dist/gpx_reporting_darwin_amd64
          chmod +x ../../dist/gpx_reporting_darwin_amd64

      - name: Build backend for Darwin (arm64)
        run: |
          cd cmd/backend
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o ../../dist/gpx_reporting_darwin_arm64
          chmod +x ../../dist/gpx_reporting_darwin_arm64

      - name: Package plugin for Linux (amd64)
        run: |
          # Copy the platform-specific backend binary to dist
          cp dist/gpx_reporting_linux_amd64 dist/gpx_reporting
          chmod +x dist/gpx_reporting

          # Create platform-specific package directory
          mkdir -p ci/packages/sheduled-reports-app

          # Copy only the files we need (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/sheduled-reports-app/

          # Create archive
          cd ci/packages
          zip -r ../../sheduled-reports-app-${{ steps.version.outputs.version }}.linux-amd64.zip sheduled-reports-app

          # Clean up for next platform
          cd ../..
          rm -rf ci/packages
          rm dist/gpx_reporting

      - name: Package plugin for Linux (arm64)
        run: |
          # Copy the platform-specific backend binary to dist
          cp dist/gpx_reporting_linux_arm64 dist/gpx_reporting
          chmod +x dist/gpx_reporting

          # Create platform-specific package directory
          mkdir -p ci/packages/sheduled-reports-app

          # Copy only the files we need (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/sheduled-reports-app/

          # Create archive
          cd ci/packages
          zip -r ../../sheduled-reports-app-${{ steps.version.outputs.version }}.linux-arm64.zip sheduled-reports-app

          # Clean up for next platform
          cd ../..
          rm -rf ci/packages
          rm dist/gpx_reporting

      - name: Package plugin for Darwin (amd64)
        run: |
          # Copy the platform-specific backend binary to dist
          cp dist/gpx_reporting_darwin_amd64 dist/gpx_reporting
          chmod +x dist/gpx_reporting

          # Create platform-specific package directory
          mkdir -p ci/packages/sheduled-reports-app

          # Copy only the files we need (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/sheduled-reports-app/

          # Create archive
          cd ci/packages
          zip -r ../../sheduled-reports-app-${{ steps.version.outputs.version }}.darwin-amd64.zip sheduled-reports-app

          # Clean up for next platform
          cd ../..
          rm -rf ci/packages
          rm dist/gpx_reporting

      - name: Package plugin for Darwin (arm64)
        run: |
          # Copy the platform-specific backend binary to dist
          cp dist/gpx_reporting_darwin_arm64 dist/gpx_reporting
          chmod +x dist/gpx_reporting

          # Create platform-specific package directory
          mkdir -p ci/packages/sheduled-reports-app

          # Copy only the files we need (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/sheduled-reports-app/

          # Create archive
          cd ci/packages
          zip -r ../../sheduled-reports-app-${{ steps.version.outputs.version }}.darwin-arm64.zip sheduled-reports-app

          # Clean up
          cd ../..
          rm -rf ci/packages

      - name: Generate checksums
        run: |
          sha256sum sheduled-reports-app-*.zip > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.tag_name }}
          body: |
            ## Grafana Scheduled Reports Plugin ${{ steps.version.outputs.version }}

            ### Installation

            Download the appropriate archive for your platform:
            - **Linux (amd64)**: `sheduled-reports-app-${{ steps.version.outputs.version }}.linux-amd64.zip`
            - **Linux (arm64)**: `sheduled-reports-app-${{ steps.version.outputs.version }}.linux-arm64.zip`
            - **macOS (Intel)**: `sheduled-reports-app-${{ steps.version.outputs.version }}.darwin-amd64.zip`
            - **macOS (Apple Silicon)**: `sheduled-reports-app-${{ steps.version.outputs.version }}.darwin-arm64.zip`

            **1. Extract the archive to your Grafana plugins directory:**
            ```bash
            unzip sheduled-reports-app-${{ steps.version.outputs.version }}.<platform>.zip -d /var/lib/grafana/plugins/
            ```

            **2. Configure Grafana to allow unsigned plugins:**

            Add to your Grafana configuration file (`grafana.ini` or `custom.ini`):
            ```ini
            [plugins]
            allow_loading_unsigned_plugins = sheduled-reports-app
            ```

            Or set the environment variable:
            ```bash
            GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=sheduled-reports-app
            ```

            **3. Restart Grafana to load the plugin.**

            ### Checksums
            See `checksums.txt` for SHA256 checksums of all archives.
          files: |
            sheduled-reports-app-*.zip
            checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
